# Generated by Django 5.0.6 on 2025-10-14 12:43

import os
import csv
from django.db import migrations
from django.conf import settings

def populate_divipola(apps, schema_editor):
    """
    Lee el archivo divipola_data.csv y puebla los modelos Department y Municipality.
    """
    Department = apps.get_model('api', 'Department')
    Municipality = apps.get_model('api', 'Municipality')

    # Construir la ruta al archivo CSV relativo a este archivo de migración
    # __file__ es la ruta de la migración actual
    # os.path.dirname(__file__) es el directorio 'migrations'
    # os.path.join(..., '..', 'data', 'divipola_data.csv') sube un nivel y entra en 'data'
    csv_file_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'divipola_data.csv')

    # Almacenar departamentos en un diccionario para evitar consultas repetidas a la BD
    departments_cache = {}

    with open(csv_file_path, 'r', encoding='utf-8') as file:
        reader = csv.reader(file)
        next(reader)  # Saltar la fila de la cabecera

        for row in reader:
            # Extraer datos de la fila
            # "cod_dpto","dpto","cod_mpio","nom_mpio",...
            dept_code = row[0]
            dept_name = row[1].strip().upper()
            muni_code = row[2]
            muni_name = row[3].strip().upper()

            # Obtener o crear el departamento
            department = departments_cache.get(dept_code)
            if not department:
                department, created = Department.objects.get_or_create(
                    name=dept_name
                )
                departments_cache[dept_code] = department

            # Crear el municipio si no existe
            Municipality.objects.get_or_create(
                name=muni_name,
                department=department
            )

class Migration(migrations.Migration):

    dependencies = [
        ('api', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(populate_divipola),
    ]